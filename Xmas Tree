package excercises.xmas.tree;

public class ChristmasTree {
    private final char treeSymbol = '*';
    private char[] ornaments = {'+', 'o'};
    StringBuilder tree = new StringBuilder();

    public ChristmasTree() {}

    //TREE BUILDING METHOSD
    public void buildTree(int treeHight) {
        StringBuilder tree = new StringBuilder();

        //CREATE ROWS OF TREE LOOP
        for (int row = 0; row < treeHight; row++) {

            //ADDING INDENTATION LOOP
            for (int indentation = 0; indentation < treeHight - row - 1; indentation++) {
                tree.append(" ");
            }

            //ADDING TREE SYMBOL LOOP
            for (int symbol = 1; symbol <= (row * 2) + 1; symbol++) {
                tree.append(treeSymbol);
            }
            tree.append(System.lineSeparator());
        }
        System.out.println(tree.toString());
    }

    //TREE WITH REGULAR DECORATION BUILDING METHOD
    public void buildRegDecoratedTree(int treeHight) {
        StringBuilder tree = new StringBuilder();

        //CREATE ROWS OF TREE LOOP
        for (int row = 0; row < treeHight; row++) {

            //ADDING INDENTATION LOOP
            for (int indentation = 0; indentation < treeHight - row - 1; indentation++) {
                tree.append(" ");
            }

            //ADDING TREE SYMBOL WITH ORNAMENTS LOOP
            for (int symbol = 1; symbol <= (row * 2) + 1; symbol++) {

                if (symbol % 4 == 0) {
                    tree.append(ornaments[0]);
                }
                else if (symbol % 2 == 0) {
                    tree.append(ornaments[1]);
                }
                else {
                    tree.append(treeSymbol);
                }
            }
            tree.append(System.lineSeparator());
        }
        System.out.println(tree.toString());
    }
    //TREE WITH IRREGULAR DECORATION BUILDING METHOD
    public void buildIrregDecoratedTree(int treeHight) {
        StringBuilder tree = new StringBuilder();

        //CREATE ROWS OF TREE LOOP
        for (int row = 0; row < treeHight; row++) {
            int maxWidth = (row * 2) + 1;

            //ADDING INDENTATION LOOP
            for (int indentation = 0; indentation < treeHight - row - 1; indentation++) {
                tree.append(" ");
            }

            //ADDING TREE SYMBOL WITH RANDOM ORNAMENTS LOOP
            for (int symbol = 1; symbol <= (row * 2) + 1; symbol++) {
                int random = new Random().nextInt(maxWidth) + 1;
                int rndOrnament = new Random().nextInt(ornaments.length);


                if (symbol % 4 == 0 && symbol == random) {
                    for (int index = 0; index < ornaments.length - 1; index++) {
                        tree.append(ornaments[rndOrnament]);
                    }
                }
                else if (symbol % 2 == 0 && symbol == random){
                    for (int index = 0; index < ornaments.length - 1; index++) {
                        tree.append(ornaments[rndOrnament]);
                    }
                }
                else {
                    tree.append(treeSymbol);
                }
            }
            tree.append(System.lineSeparator());
        }
        System.out.println(tree.toString());
    }
}

package excercises.xmas.tree;

import java.util.Scanner;

public class Xmas {
    public static void main(String[] args) {

        ChristmasTree tree = new ChristmasTree();
        Scanner inPut = new Scanner(System.in);

        System.out.println("Pass tree hight: ");
        int treeHight = inPut.nextInt();
        tree.buildTree(treeHight);
        tree.buildRegDecoratedTree(treeHight);
        tree.buildIrregDecoratedTree(treeHight);
        inPut.close();
    }
}
