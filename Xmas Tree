package excercises.xmas.tree;

import java.util.Random;
import java.util.Scanner;

public class ChristmasTree {
    private final char treeSymbol = '*';
    private char[] defaOrnaments = {'+', 'o', '$', '#'};
    private char[] ornaments = new char[4];
    Decision decision = new Decision();
    Random random = new Random();

    public ChristmasTree() {}

    //TREE BUILDING METHOD
    public void buildTree(int treeHight) {
        StringBuilder tree = new StringBuilder();

        //CREATE ROWS OF TREE LOOP
        for (int row = 0; row < treeHight; row++) {
            int maxWidth = (row * 2) + 1;

            //ADDING INDENTATION LOOP
            for (int indentation = 0; indentation < treeHight - row - 1; indentation++) {
                tree.append(" ");
            }

            //ADDING TREE SYMBOL LOOP
            for (int currentPosition = 1; currentPosition <= maxWidth; currentPosition++) {
                tree.append(treeSymbol);
            }
            tree.append(System.lineSeparator());
        }
        System.out.println(tree.toString());
    }

    //TREE WITH REGULAR DECORATION BUILDING METHOD
    public void buildRegDecoratedTree(int treeHight) {
        StringBuilder tree = new StringBuilder();
        char[] selectedArr = decision.pickOrnaments(defaOrnaments, ornaments);

        //CREATE ROWS OF TREE LOOP
        for (int row = 0; row < treeHight; row++) {
            int maxWidth = (row * 2) + 1;

            //ADDING INDENTATION LOOP
            for (int indentation = 0; indentation < treeHight - row - 1; indentation++) {
                tree.append(" ");
            }

            //ADDING TREE SYMBOL WITH ORNAMENTS LOOP
            for (int currentPosition = 1, arrIndex = -1; currentPosition <= maxWidth; currentPosition++, arrIndex++) {

                if (currentPosition % 2 == 0 && arrIndex < selectedArr.length) {
                    tree.append(selectedArr[arrIndex]);
                    arrIndex--;
                }
                else if (arrIndex == selectedArr.length) {
                    arrIndex = 0;
                    tree.append(selectedArr[arrIndex]);
                    arrIndex--;
                }
                else {
                    tree.append(treeSymbol);
                }
            }
            tree.append(System.lineSeparator());
        }
        System.out.println(tree.toString());
    }

    //TREE WITH IRREGULAR DECORATION BUILDING METHOD
    public void buildIrregDecoratedTree(int treeHight) {
        StringBuilder tree = new StringBuilder();
        char[] selectedArr = decision.pickOrnaments(defaOrnaments, ornaments);

        //CREATE ROWS OF TREE LOOP
        for (int row = 0; row < treeHight; row++) {
            int maxWidth = (row * 2) + 1;

            //ADDING INDENTATION LOOP
            for (int indentation = 0; indentation < treeHight - row - 1; indentation++) {
                tree.append(" ");
            }

            //ADDING TREE SYMBOL WITH RANDOM ORNAMENTS LOOP
            for (int currentPosition = 1; currentPosition <= maxWidth; currentPosition++) {
                int rndOrnament = random.nextInt(selectedArr.length);

                if (thirtyPercentChance()) {
                    tree.append(selectedArr[rndOrnament]);
                }
                else {
                    tree.append(treeSymbol);
                }
            }
            tree.append(System.lineSeparator());
        }
        System.out.println(tree.toString());
    }

    private boolean thirtyPercentChance() {
        int tmp = random.nextInt(10);
         if (tmp < 3) {
             return true;
         }
         return false;
    }
}

public class Decision {
    Scanner inPut = new Scanner(System.in);

    public char[] pickOrnaments(char[] arr1, char[] arr2) {
        System.out.println("Select type of ornaments:");
        System.out.println("[d] - default ornaments");
        System.out.println("[c] - customize ornaments");
        String decision = inPut.next();

        char[] tmp = {' '};
        if (decision.equals("d")) {
            tmp = arr1;
        }
        else if (decision.equals("c")) {
            tmp = arr2;
            System.out.println("Type 4 ornament you wish to add: ");

            for (int i = 0; i < tmp.length; i++) {
                tmp[i] = inPut.next().charAt(0);
            }
            inPut.close();
        }
        else {
            throw new IllegalArgumentException("You can only select [d] for default or [c] for custom.");
        }

        return tmp;
    }
}


public class Xmas {
    public static void main(String[] args) {

        ChristmasTree tree = new ChristmasTree();
        Scanner inPut = new Scanner(System.in);

        System.out.println("Pass tree hight: ");
        int treeHight = inPut.nextInt();
        tree.buildTree(treeHight);
        tree.buildRegDecoratedTree(treeHight);
        tree.buildIrregDecoratedTree(treeHight);
        inPut.close();
    }
}
